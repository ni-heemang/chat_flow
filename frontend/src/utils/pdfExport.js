import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const exportAnalysisDataToPDF = async (analysisData, roomName) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPos = 20;

  // 제목 설정
  doc.setFontSize(20);
  doc.text(`채팅 분석 보고서`, pageWidth / 2, yPos, { align: 'center' });
  yPos += 10;

  doc.setFontSize(14);
  doc.text(`채팅방: ${roomName}`, pageWidth / 2, yPos, { align: 'center' });
  yPos += 10;

  doc.setFontSize(10);
  doc.text(`생성일: ${new Date().toLocaleString('ko-KR')}`, pageWidth / 2, yPos, { align: 'center' });
  yPos += 20;

  // 기본 통계
  if (analysisData.analysisStats) {
    const stats = analysisData.analysisStats;
    doc.setFontSize(16);
    doc.text('📊 기본 통계', 20, yPos);
    yPos += 10;

    doc.setFontSize(12);
    doc.text(`• 총 메시지 수: ${stats.totalMessages || 0}개`, 25, yPos);
    yPos += 7;
    doc.text(`• 활성 사용자: ${stats.activeUsers || 0}명`, 25, yPos);
    yPos += 7;
    doc.text(`• 평균 응답 시간: ${stats.averageResponseTime || 0}초`, 25, yPos);
    yPos += 7;
    doc.text(`• 최고 활동 시간: ${stats.peakHour || 0}시`, 25, yPos);
    yPos += 15;
  }

  // 키워드 분석
  if (analysisData.keywordData?.topKeywords?.length > 0) {
    doc.setFontSize(16);
    doc.text('🔍 키워드 분석', 20, yPos);
    yPos += 10;

    doc.setFontSize(12);
    analysisData.keywordData.topKeywords.slice(0, 10).forEach((keyword, index) => {
      doc.text(`${index + 1}. ${keyword.keyword}: ${keyword.count}회`, 25, yPos);
      yPos += 7;
    });
    yPos += 10;
  }

  // 참여도 분석
  if (analysisData.participationData?.userStats?.length > 0) {
    if (yPos > pageHeight - 50) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(16);
    doc.text('👥 참여도 분석', 20, yPos);
    yPos += 10;

    doc.setFontSize(12);
    analysisData.participationData.userStats.slice(0, 10).forEach((user, index) => {
      doc.text(`${index + 1}. ${user.username}: ${user.messageCount}개 메시지`, 25, yPos);
      yPos += 7;
    });
    yPos += 10;
  }

  // 시간별 활동 분석
  if (analysisData.hourlyActivityData?.hourlyStats) {
    if (yPos > pageHeight - 50) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(16);
    doc.text('⏰ 시간별 활동 분석', 20, yPos);
    yPos += 10;

    doc.setFontSize(12);
    const hourlyStats = Object.entries(analysisData.hourlyActivityData.hourlyStats)
      .sort(([a], [b]) => parseInt(a) - parseInt(b))
      .slice(0, 12);

    hourlyStats.forEach(([hour, count]) => {
      doc.text(`• ${hour}시: ${count}개 메시지`, 25, yPos);
      yPos += 7;
    });
    yPos += 10;
  }

  // 분석 요약
  doc.setFontSize(16);
  doc.text('📋 분석 요약', 20, yPos);
  yPos += 10;

  doc.setFontSize(12);
  const totalMessages = analysisData.analysisStats?.totalMessages || 0;
  const activeUsers = analysisData.analysisStats?.activeUsers || 0;
  const topKeyword = analysisData.keywordData?.topKeywords?.[0]?.keyword || '없음';
  const mostActiveUser = analysisData.participationData?.userStats?.[0]?.username || '없음';

  doc.text(`• 이 채팅방은 총 ${totalMessages}개의 메시지가 교환되었습니다.`, 25, yPos);
  yPos += 7;
  doc.text(`• ${activeUsers}명의 사용자가 활발히 참여했습니다.`, 25, yPos);
  yPos += 7;
  doc.text(`• 가장 많이 사용된 키워드는 "${topKeyword}" 입니다.`, 25, yPos);
  yPos += 7;
  doc.text(`• 가장 활발한 사용자는 "${mostActiveUser}" 입니다.`, 25, yPos);
  yPos += 15;

  // 푸터
  doc.setFontSize(8);
  doc.text('Generated by FlowChat Analytics', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // PDF 다운로드
  const fileName = `${roomName}_분석보고서_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const exportElementToPDF = async (elementId, fileName) => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    // HTML 요소를 캔버스로 변환
    const canvas = await html2canvas(element, {
      scale: 2, // 해상도 향상
      useCORS: true,
      allowTaint: true,
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF();
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    
    // 이미지 비율 계산
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
    
    const finalWidth = imgWidth * ratio;
    const finalHeight = imgHeight * ratio;
    
    // PDF에 이미지 추가
    pdf.addImage(
      imgData, 
      'PNG', 
      (pdfWidth - finalWidth) / 2, 
      (pdfHeight - finalHeight) / 2, 
      finalWidth, 
      finalHeight
    );
    
    pdf.save(fileName);
  } catch (error) {
    console.error('PDF export error:', error);
    throw new Error('PDF 내보내기에 실패했습니다.');
  }
};

export const exportChartsToPDF = async (charts, roomName) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPos = 20;

  // 제목
  doc.setFontSize(20);
  doc.text(`${roomName} 차트 보고서`, pageWidth / 2, yPos, { align: 'center' });
  yPos += 15;

  doc.setFontSize(10);
  doc.text(`생성일: ${new Date().toLocaleString('ko-KR')}`, pageWidth / 2, yPos, { align: 'center' });
  yPos += 20;

  // 각 차트를 캡처하고 PDF에 추가
  for (let i = 0; i < charts.length; i++) {
    const chart = charts[i];
    const element = document.getElementById(chart.id);
    
    if (element) {
      try {
        const canvas = await html2canvas(element, {
          scale: 1,
          useCORS: true,
          allowTaint: true,
        });

        const imgData = canvas.toDataURL('image/png');
        
        // 새 페이지 추가 (첫 번째 차트 제외)
        if (i > 0) {
          doc.addPage();
          yPos = 20;
        }

        // 차트 제목
        doc.setFontSize(14);
        doc.text(chart.title, pageWidth / 2, yPos, { align: 'center' });
        yPos += 15;

        // 이미지 크기 계산
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        const maxWidth = pageWidth - 40;
        const maxHeight = pageHeight - 80;
        const ratio = Math.min(maxWidth / imgWidth, maxHeight / imgHeight);
        
        const finalWidth = imgWidth * ratio;
        const finalHeight = imgHeight * ratio;
        
        // 이미지 추가
        doc.addImage(
          imgData, 
          'PNG', 
          (pageWidth - finalWidth) / 2, 
          yPos, 
          finalWidth, 
          finalHeight
        );
        
      } catch (error) {
        console.error('Chart capture error:', error);
      }
    }
  }

  // PDF 다운로드
  const fileName = `${roomName}_차트보고서_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};